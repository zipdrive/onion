#pragma once
#include "../graphics/sprite.h"
#include "object.h"

namespace onion
{
	namespace world
	{

		// A three-dimensional graphic displayed to the screen.
		class Graphic3D
		{
		public:
			/// <summary>Displays the graphic.</summary>
			/// <param name="center">The ray from the camera position towards the camera.</param>
			virtual void display(const Ray& center) const = 0;
		};


		// A sprite sheet that displays a sprite on the xz-plane.
		class Generic3DSpriteSheet
		{
		private:
			// All loaded sprite sheets, .
			static std::unordered_map<String, const Generic3DSpriteSheet*> m_SpriteSheets;

			// The path to the image file, from the res/img/world/ folder. Includes extensions.
			String m_Path;

		public:
			/// <summary>Retrieves the sprite sheet registered with the given path.</summary>
			/// <param name="path">The path to the image file, from the res/img/world/ folder.</param>
			static const Generic3DSpriteSheet* get_sprite_sheet(String path);


			/// <summary>Registers the sprite sheet.</summary>
			/// <param name="path">The path to the image file, from the res/img/world/ folder.</param>
			Generic3DSpriteSheet(const char* path);

			/// <summary>Unregisters the sprite sheet.</summary>
			virtual ~Generic3DSpriteSheet();


			/// <summary>Retrieves the sprite associated with the given ID.</summary>
			/// <param name="id">The ID to retrieve the sprite of.</param>
			/// <returns>The sprite associated with the ID, if there is one. NULL otherwise.</returns>
			virtual const Sprite* get_sprite(SPRITE_ID id) const = 0;
			
			/// <summary>Displays a sprite from the sprite sheet.</summary>
			/// <param name="sprite">The sprite to display.</param>
			virtual void display(const Sprite* sprite) const = 0;
		};

		// A sprite sheet that uses dither shading with a normal vector interpolated from each vertex.
		class Flat3DPixelSpriteSheet : public PixelSpriteSheet<Int, Int>, public Generic3DSpriteSheet
		{
		protected:
			// The shader program for the sprite sheet.
			static _SpriteShader* m_Flat3DPixelShader;

			/// <summary>Loads vertex attribute data from a line in a meta file.</summary>
			/// <param name="id">The ID associated with the line of data.</param>
			/// <param name="line">The line of data from the meta file.</param>
			/// <param name="image">The loaded image.</param>
			/// <param name="data">Outputs the vertex attributes into this array of numeric data.</param>
			/// <returns>The sprite generated by the line of data.</returns>
			opengl::_VertexBufferData* __load(LoadFile& file, opengl::_Image* image);

		public:
			/// <summary>Gets the shader for pixel perfect sprites.</summary>
			/// <returns>A shader that only takes two image keys as arguments.</returns>
			static _SpriteShader* get_shader();

			/// <summary>Loads a sprite sheet from file.</summary>
			/// <param name="path">The path to the image file, from the res/img/world/ folder.</param>
			Flat3DPixelSpriteSheet(const char* path);

			
			/// <summary>Retrieves the sprite associated with the given ID.</summary>
			/// <param name="id">The ID to retrieve the sprite of.</param>
			/// <returns>The sprite associated with the ID, if there is one. NULL otherwise.</returns>
			const Sprite* get_sprite(SPRITE_ID id) const;

			
			using PixelSpriteSheet<Int, Int>::display;

			/// <summary>Displays a sprite from the sprite sheet.</summary>
			/// <param name="sprite">The sprite to display.</param>
			virtual void display(const Sprite* sprite) const;
		};


		// A three-dimensional sprite graphic.
		class SpriteGraphic3D : public Graphic3D
		{
		protected:
			// The sprite sheet that the sprite is on.
			const Generic3DSpriteSheet* m_SpriteSheet;

		public:
			/// <summary>Constructs a three-dimensional sprite graphic.</summary>
			/// <param name="sprite_sheet">The</param>
			/// <param name="sprite">The data for the sprite to display.</param>
			SpriteGraphic3D(const Generic3DSpriteSheet* sprite_sheet);

			/// <summary>Retrieve the sprite to display.</summary>
			/// <param name="center">The ray from the camera position towards the camera.</param>
			/// <returns>The sprite to display.</returns>
			virtual const Sprite* get_sprite(const Ray& center) const = 0;
		};
		
		// A three-dimensional sprite graphic that always faces the screen.
		class BillboardedSpriteGraphic3D : public SpriteGraphic3D
		{
		public:
			/// <summary>Constructs a three-dimensional sprite graphic.</summary>
			/// <param name="sprite_sheet">The</param>
			/// <param name="sprite">The data for the sprite to display.</param>
			BillboardedSpriteGraphic3D(const Generic3DSpriteSheet* sprite_sheet);

			/// <summary>Displays the graphic.</summary>
			/// <param name="center">The ray from the camera position towards the camera.</param>
			virtual void display(const Ray& center) const;
		};

		// A three-dimensional sprite graphic aligned with the x-axis.
		class XAlignedSpriteGraphic3D : public SpriteGraphic3D
		{
		public:
			/// <summary>Constructs a three-dimensional sprite graphic.</summary>
			/// <param name="sprite_sheet">The</param>
			/// <param name="sprite">The data for the sprite to display.</param>
			XAlignedSpriteGraphic3D(const Generic3DSpriteSheet* sprite_sheet);

			/// <summary>Displays the graphic.</summary>
			/// <param name="center">The ray from the camera position towards the camera.</param>
			virtual void display(const Ray& center) const;
		};


		// A three-dimensional sprite graphic that always displays the same sprite.
		template <typename T>
		class StaticSpriteGraphic3D : public T
		{
		protected:
			// The sprite that is always displayed.
			const Sprite* m_Sprite;

		public:
			/// <summary>Constructs a three-dimensional sprite graphic.</summary>
			/// <param name="sprite_sheet">The sprite sheet to use.</param>
			/// <param name="sprite">The data for the sprite to display.</param>
			StaticSpriteGraphic3D(const Generic3DSpriteSheet* sprite_sheet, const Sprite* sprite);

			/// <summary>Retrieve the sprite to display.</summary>
			/// <param name="center">The ray from the camera position towards the camera.</param>
			/// <returns>The sprite to display.</returns>
			const Sprite* get_sprite(const Ray& center) const;
		};

		typedef StaticSpriteGraphic3D<BillboardedSpriteGraphic3D> StaticBillboardedSpriteGraphic3D;
		typedef StaticSpriteGraphic3D<XAlignedSpriteGraphic3D> StaticXAlignedSpriteGraphic3D;


		// An object that displays a three-dimensional graphic.
		class Graphic3DObject : public Object
		{
		protected:
			// The graphic to display.
			Graphic3D* m_Graphic;

		public:
			/// <summary>Constructs an object that displays a 3D graphic.</summary>
			/// <param name="bounds">The bounds of the object. Should be constructed with new specifically for this object.</param>
			/// <param name="graphic">The graphic to display. Should be constructed with new specifically for this object.</param>
			Graphic3DObject(Shape* bounds, Graphic3D* graphic);

			/// <summary>Destroys the graphic.</summary>
			virtual ~Graphic3DObject();

			/// <summary>Displays the object's graphic.</summary>
			/// <param name="center">The ray from the camera position towards the camera.</param>
			virtual void display(const Ray& center) const;
		};


		// A dimensionless wall aligned with the x-axis, represented graphically by a single fixed sprite.
		class XAlignedWall : public Graphic3DObject
		{
		public:
			/// <summary>Constructs an x-aligned wall.</summary>
			/// <param name="pos">The position on the wall with the lowest x- and z- coordinates.</param>
			/// <param name="sprite_sheet">The sprite sheet that the wall's sprite is on.</param>
			/// <param name="sprite">The sprite to use for the wall.</param>
			XAlignedWall(const vec3i& pos, const Generic3DSpriteSheet* sprite_sheet, const Sprite* sprite);
		};


		// A dimensionless wall aligned with either the x or y-axis.
		template <typename T>
		class WallGenerator : public ObjectGenerator
		{
		protected:
			// The sprite sheet that the wall's sprite comes from.
			const Generic3DSpriteSheet* m_SpriteSheet;

			// The sprite used when displaying the wall.
			const Sprite* m_Sprite;

		public:
			/// <summary>Constructs a generator for a wall aligned to the x or y-axis.</summary>
			/// <param name="id">The ID of the generator.</param>
			/// <param name="params">The parameters to pass to the generator.</param>
			WallGenerator(std::string id, const StringData& params) : ObjectGenerator(id)
			{
				String sprite_sheet;
				if (params.get("sprite_sheet", sprite_sheet))
				{
					if (m_SpriteSheet = Generic3DSpriteSheet::get_sprite_sheet(sprite_sheet))
					{
						String sprite;
						params.get("sprite", sprite);

						m_Sprite = m_SpriteSheet->get_sprite(sprite);
					}
				}
			}

			/// <summary>Generates an object.</summary>
			/// <returns>An Object created with new.</returns>
			virtual Object* generate(const StringData& params) const
			{
				vec3i pos;
				params.get("pos", pos);
				pos = UNITS_PER_PIXEL * (INT_VEC3)pos;

				return new T(pos, m_SpriteSheet, m_Sprite);
			}
		};

		typedef WallGenerator<XAlignedWall> XAlignedWallGenerator;

	}
}